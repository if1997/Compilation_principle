{
    // 使用 IntelliSense 了解相关属性。 
    // 悬停以查看现有属性的描述。
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387   
    "version": "0.2.0",
    "configurations": [
        
        {
            "name": "(gdb) Launch",
            "type": "cppdbg",
            "request": "launch",
            "program": "${file}.exe",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": true,
            "MIMode": "gdb",
            "miDebuggerPath": "D:\\program\\MinGW\\bin\\gdb.exe",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "Compile3" 
        },
            {
                "name": "C++ Launch (GDB)",                 // 配置名称，将会在启动配置的下拉菜单中显示
                "type": "cppdbg",                           // 配置类型，这里只能为cppdbg
                "request": "launch",                        // 请求配置类型，可以为launch（启动）或attach（附加）
                "targetArchitecture": "x86",                // 生成目标架构，一般为x86或x64，可以为x86, arm, arm64, mips, x64, amd64, x86_64
                "program": "${file}.exe",                   // 将要进行调试的程序的路径
                "miDebuggerPath":"D:\\program\\MinGW\\bin\\gdb.exe", // miDebugger的路径，注意这里要与MinGw的路径对应
                "args": [],                                 // 程序调试时传递给程序的命令行参数，一般设为空即可
                "stopAtEntry": false,                       // 设为true时程序将暂停在程序入口处，一般设置为false
                "cwd": "${workspaceRoot}",                  // 调试程序时的工作目录，一般为${workspaceRoot}即代码所在目录
                "externalConsole": true,                    // 调试时是否显示控制台窗口，一般设置为true显示控制台
                //"preLaunchTask": "g++",
                "preLaunchTask": "Compile3" 　　                  // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc
            },            
                    {
                        "name": "(gdb) Launch1", // 配置名称，将会在启动配置的下拉菜单中显示
                        "type": "cppdbg", // 配置类型，这里只能为cppdbg
                        "request": "launch", // 请求配置类型，可以为launch（启动）或attach（附加）
                        "program": "${fileDirname}/${fileBasenameNoExtension}.exe", // 将要进行调试的程序的路径
                        "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可
                        "stopAtEntry": false, // 设为true时程序将暂停在程序入口处，我一般设置为true
                        "cwd": "${workspaceFolder}", // 调试程序时的工作目录
                        "environment": [], // （环境变量？）
                        "externalConsole": true, // 调试时是否显示控制台窗口，一般设置为true显示控制台
                        "internalConsoleOptions": "neverOpen", // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？
                        "MIMode": "gdb", // 指定连接的调试器，可以为gdb或lldb。但目前lldb在windows下没有预编译好的版本。
                        "miDebuggerPath": "D:\\program\\MinGW\\bin\\gdb.exe", // 调试器路径，Windows下后缀不能省略，Linux下则去掉
                        "setupCommands": [ // 用处未知，模板如此
                            {
                                "description": "Enable pretty-printing for gdb",
                                "text": "-enable-pretty-printing",
                                "ignoreFailures": false
                            }
                        ],
                        "preLaunchTask": "Compile1" // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应
                    },
                    {
                        // 配置 VS Code 调试行为：
                        "name": "GDB Debug", // 设置在启动配置下拉菜单中显示调试配置的名称。
                        "preLaunchTask": "Compile2", // 调试会话开始前要运行的任务。
                        "type": "cppdbg", // 设置要使用的基础调试器。使用 GDB 或 LLDB 时必须是 cppdbg 。
                        "request": "launch", // 设置启动程序还是附加到已经运行的实例。启动或附加 ( launch | attach ).
                        "program": "${fileDirname}/${fileBasenameNoExtension}.exe", // 调试器将启动或附加的可执行文件的完整路径。
                        "externalConsole": true, // 设置是否显示外部控制台。
                        "logging": { // 用于确定应该将哪些类型的消息记录到调试控制台。
                            "exceptions": true, // 是否应将异常消息记录到调试控制台。默认为真。
                            "moduleLoad": false, // 是否应将模块加载事件记录到调试控制台。默认为真。
                            "programOutput": true, // 是否应将程序输出记录到调试控制台的可选标志。默认为真。
                            "engineLogging": false, // 是否应将诊断引擎日志记录到调试控制台。默认为假。
                            "trace": false, // 是否将诊断适配器命令跟踪记录到调试控制台。默认为假。
                            "traceResponse": false // 是否将诊断适配器命令和响应跟踪记录到调试控制台。默认为假。
                        },
                        // 配置目标应用程序：
                        "args": [], // 设置调试时传递给程序的命令行参数。
                        "cwd": "${workspaceFolder}", // 设置调试器启动的应用程序的工作目录。
                        "environment": [], // 设置调试时添加到程序环境中的环境变量，例如: [ { "name": "squid", "value": "clam" } ]。
                        // 自定义 GDB 或者 LLDB：
                        "windows": {
                            "MIMode": "gdb", // 指定 VS Code 连接的调试器，必须为 gdb 或者 lldb。
                            "miDebuggerPath": "D:\\program\\MinGW\\bin\\gdb.exe" // 调试器的路径，修改为你的安装路径
                        },
                        "miDebuggerArgs": "", // 传递给调试器的附加参数
                        "stopAtEntry": false, // 设置调试器是否停止在目标的入口（附加时忽略）。默认值为 false。
                        "setupCommands": [{ // 执行下面的命令数组以设置 GDB 或 LLDB
                            "description": "Enable pretty-printing for gdb",
                            "text": "-enable-pretty-printing", // 鼠标悬停查看变量的值，需要启用 pretty-printing 。
                            "ignoreFailures": true // 忽略失败的命令，默认为 false 。
                        }]
                    }
                
               
    ]
        
    
}